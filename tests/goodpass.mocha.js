// Generated by CoffeeScript 1.7.1
(function() {
  var blank, errorLength, errorLower, errorNumber, errorSymbol, errorUpper, expect, goodpass, prefix;

  expect = require('chai').expect;

  goodpass = require('../goodpass.coffee');

  prefix = 'Too short to not contain';

  errorLength = function(n) {
    return "Too short (must be " + n + " characters or more)";
  };

  errorUpper = function(n) {
    return "" + prefix + " uppercase letter (must be " + n + " characters or more)";
  };

  errorLower = function(n) {
    return "" + prefix + " lowercase letter (must be " + n + " characters or more)";
  };

  errorNumber = function(n) {
    return "" + prefix + " number (must be " + n + " characters or more)";
  };

  errorSymbol = function(n) {
    return "" + prefix + " symbol (must be " + n + " characters or more)";
  };

  blank = 'Empty password';

  describe('goodpass', function() {
    return describe('passwords', function() {
      it('should not be valid if blank', function() {
        return expect(goodpass('')).to.eql([blank]);
      });
      it('should not be valid if fewer than 8 chars', function() {
        return expect(goodpass('abcdefg')).to.eql([errorLength(8)]);
      });
      it('should not be valid if fewer than 12 chars with no lowercase letter', function() {
        return expect(goodpass('ABCDEFGH1*')).to.eql([errorLower(20)]);
      });
      it('should not be valid if fewer than 12 chars with no uppercase letter', function() {
        return expect(goodpass('abcdefgh1*')).to.eql([errorUpper(20)]);
      });
      it('should not be valid if fewer than 12 chars with no number', function() {
        return expect(goodpass('abcdefgH*')).to.eql([errorNumber(16)]);
      });
      it('should not be valid if fewer than 12 chars with no symbol', function() {
        return expect(goodpass('abcdefgH1')).to.eql([errorSymbol(12)]);
      });
      it('should not be valid if fewer than 16 chars with no lowercase letter', function() {
        return expect(goodpass('ABCDEFGHIJKL1*')).to.eql([errorLower(20)]);
      });
      it('should not be valid if fewer than 16 chars with no uppercase letter', function() {
        return expect(goodpass('abcdefghijkl1*')).to.eql([errorUpper(20)]);
      });
      it('should not be valid if fewer than 16 chars with no number', function() {
        return expect(goodpass('abcdefghijkL*')).to.eql([errorNumber(16)]);
      });
      it('should not be valid if fewer than 20 chars with no lowercase letter', function() {
        return expect(goodpass('ABCDEFGHIJKL12345')).to.eql([errorLower(20)]);
      });
      it('should not be valid if fewer than 20 chars with no uppercase letter', function() {
        return expect(goodpass('abcdefghijkl12345')).to.eql([errorUpper(20)]);
      });
      it('should be valid if 8+ chars with symbols, mixed case letters, and numbers', function() {
        return expect(goodpass('abcdefgH1*')).to.eql([]);
      });
      it('should be valid if 12+ chars with mixed case letters, and numbers', function() {
        return expect(goodpass('abcdefghijK1')).to.eql([]);
      });
      it('should be valid if 16+ chars with mixed case letters', function() {
        return expect(goodpass('abcdefghijklmnoP')).to.eql([]);
      });
      return it('should be valid if 20+ chars', function() {
        return expect(goodpass('abcdefghijklmnopqrst')).to.eql([]);
      });
    });
  });

}).call(this);
