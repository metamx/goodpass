// Generated by CoffeeScript 1.7.1
(function() {
  var errorLength, errorLower, errorNumber, errorSymbol, errorUpper, goodpass, prefix;

  prefix = 'Too short to not contain';

  errorLength = function(n) {
    return "Too short (must be " + n + " characters or more)";
  };

  errorUpper = function(n) {
    return "" + prefix + " uppercase letter (must be " + n + " characters or more)";
  };

  errorLower = function(n) {
    return "" + prefix + " lowercase letter (must be " + n + " characters or more)";
  };

  errorNumber = function(n) {
    return "" + prefix + " number (must be " + n + " characters or more)";
  };

  errorSymbol = function(n) {
    return "" + prefix + " symbol (must be " + n + " characters or more)";
  };

  goodpass = function(password) {
    var hasLower, hasNumber, hasSymbol, hasUpper, msgs, symbolRegex;
    msgs = [];
    symbolRegex = /[-!$%^&*()_+|~=`{}\[\]:";'<>?,.\/]/g;
    hasSymbol = password.match(symbolRegex) === null;
    hasNumber = password.match(/[0-9]/g) === null;
    hasUpper = password.match(/[A-Z]/g) === null;
    hasLower = password.match(/[a-z]/g) === null;
    if (password) {
      if (password.length < 8) {
        msgs.push(errorLength(8));
      } else if (password.length < 12) {
        if (hasSymbol) {
          msgs.push(errorSymbol(12));
        }
        if (hasNumber) {
          msgs.push(errorNumber(16));
        }
        if (hasUpper) {
          msgs.push(errorUpper(20));
        }
        if (hasLower) {
          msgs.push(errorLower(20));
        }
      } else if (password.length < 16) {
        if (hasNumber) {
          msgs.push(errorNumber(16));
        }
        if (hasUpper) {
          msgs.push(errorUpper(20));
        }
        if (hasLower) {
          msgs.push(errorLower(20));
        }
      } else if (password.length < 20) {
        if (hasUpper) {
          msgs.push(errorUpper(20));
        }
        if (hasLower) {
          msgs.push(errorLower(20));
        }
      }
    } else {
      msgs.push('Empty password');
    }
    return msgs;
  };

  module.exports = goodpass;

}).call(this);
